<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sun, 30 Jan 2022 14:35:58 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: electronPublicFolder</title>
		<dateCreated>Sat, 02 Sep 2017 18:11:21 GMT</dateCreated>
		<dateModified>Sun, 30 Jan 2022 14:35:58 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 10, 18</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>133</windowTop>
		<windowLeft>1274</windowLeft>
		<windowBottom>1114</windowBottom>
		<windowRight>2560</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/testing/publicfolder2/">
			<outline text="notes.opml" isComment="true" created="Wed, 04 Aug 2021 21:29:25 GMT">
				<outline text="before doing a build, run this script" created="Wed, 04 Aug 2021 21:29:28 GMT">
					<outline text="nodeEditorSuite.suckDownPublicFolderIncludes.script ()" created="Fri, 10 Sep 2021 16:57:37 GMT">
						<outline text="&quot;0 files&quot;" isComment="true"/>
						</outline>
					</outline>
				<outline text="Must do a save of this file before building. See how lib/publicfolder.js works. " created="Thu, 21 Oct 2021 20:08:32 GMT"/>
				<outline text="file.setmodified (&quot;macintosh hd:applications:Public Folder.app&quot;, clock.now ())" created="Thu, 21 Oct 2021 20:08:59 GMT">
					<outline text="true" isComment="true"/>
					</outline>
				</outline>
			<outline text="lib/publicfolder.js">
				<outline text="[[http://publicfolder.io/code/npm/publicfolder.js]]"/>
				</outline>
			<outline text="main.js">
				<outline text="var myProductName = &quot;electronPublicFolder&quot;, myVersion = &quot;0.4.10&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const publicfolder = require (&quot;./lib/publicfolder.js&quot;);"/>
				<outline text="const publicfolder = require (&quot;publicfolder&quot;);" isComment="true"/>
				<outline text=""/>
				<outline text="const electronland = require (&quot;electronland&quot;).main; "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const userhome = require (&quot;userhome&quot;);"/>
				<outline text=""/>
				<outline text="var myConfig = {">
					<outline text="productname: &quot;electronPublicFolder&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="productnameForDisplay: &quot;Public Folder&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="description: &quot;An Electron shell for the publicfolder package.&quot;," created="Wed, 07 May 2014 12:04:38 GMT" pgfnum="41257"/>
					<outline text="version: myVersion," created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="indexfilename: &quot;index.html&quot;,"/>
					<outline text="flOpenDevToolsAtStart: false,"/>
					<outline text="mainWindowWidth: 800,"/>
					<outline text="mainWindowHeight: 800,"/>
					<outline text="appDirname: __dirname,"/>
					<outline text="asyncMessageCallback: handleMessageFromBrowser,"/>
					<outline text="publicFolder: {">
						<outline text="watchFolder: &quot;/Users/davewiner/publicFolder/&quot;," isComment="true"/>
						<outline text="s3Folder: &quot;/publicfolder.io/testing/&quot;," isComment="true"/>
						<outline text="urlS3Folder: &quot;http://publicfolder.io/testing/&quot;," isComment="true"/>
						<outline text="httpPort: 1500,"/>
						<outline text="flHttpEnabled: true,"/>
						<outline text=""/>
						<outline text="logFname: &quot;log.json&quot;,"/>
						<outline text="fileStatsFname: &quot;localfiles.json&quot;,"/>
						<outline text="s3FileStatsFname: &quot;s3files.json&quot;,"/>
						<outline text="queueFname: &quot;queue.json&quot;,"/>
						<outline text=""/>
						<outline text="addToLogCallback: addToLogCallback,"/>
						<outline text="uploadStartCallback: uploadStartCallback,"/>
						<outline text="uploadDoneCallback: uploadDoneCallback,"/>
						<outline text="viewStatsCallback: viewStatsCallback,"/>
						<outline text="debugMessageCallback: electronland.debugMessage"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function addToLogCallback (theLogItem) {">
					<outline text="electronland.sendIpcToBrowser (&quot;addToLog&quot;, utils.jsonStringify (theLogItem)); "/>
					<outline text="}"/>
					</outline>
				<outline text="function uploadStartCallback (fileInfo) {">
					<outline text="electronland.sendIpcToBrowser (&quot;uploadStart&quot;, utils.jsonStringify (fileInfo)); "/>
					<outline text="}"/>
					</outline>
				<outline text="function uploadDoneCallback (fileInfo) {">
					<outline text="electronland.sendIpcToBrowser (&quot;uploadDone&quot;, utils.jsonStringify (fileInfo)); "/>
					<outline text="}"/>
					</outline>
				<outline text="function viewStatsCallback (stats) {">
					<outline text="electronland.sendIpcToBrowser (&quot;viewStats&quot;, utils.jsonStringify (stats)); "/>
					<outline text="}"/>
					</outline>
				<outline text="function handleMessageFromBrowser (event, arg1, arg2, arg3) {">
					<outline text="console.log (&quot;handleMessageFromBrowser: &quot; + arg1 + &quot;, arg2 == &quot; + arg2 + &quot;, arg3 == &quot; + arg3);"/>
					<outline text="switch (arg1) {">
						<outline text="case &quot;emptyLog&quot;:" isComment="true">
							<outline text="emptyLog ();"/>
							<outline text="return (true); //we consumed the event"/>
							</outline>
						<outline text="case &quot;scanFilesNow&quot;: " isComment="true">
							<outline text="checkFileAndS3Stats ();"/>
							<outline text="return (true);"/>
							</outline>
						<outline text="case &quot;setPublicfolderConfig&quot;: //9/7/17 by DW" isComment="true">
							<outline text="jstruct = JSON.parse (arg2);"/>
							<outline text="publicfolder.setFolders (jstruct);"/>
							<outline text="break;"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false); //indicates that we did not handle the message"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="electronland.init (myConfig, function () {">
					<outline text="myConfig.publicFolder.userDataFolder = electronland.getConfig ().userDataFolder;"/>
					<outline text="function checkConfigJson (callback) {">
						<outline text="Changes" isComment="true">
							<outline text="9/18/17; 11:20:15 AM by DW">
								<outline text="If config.json doesn't exist in the user's data folder, create it, pointing to publicFolder in the user's home folder."/>
								</outline>
							</outline>
						<outline text="let f = myConfig.publicFolder.userDataFolder + &quot;config.json&quot;;"/>
						<outline text="console.log (&quot;checkConfigJson: f == &quot; + f);"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="function createConfig () {">
								<outline text="let jstruct = {">
									<outline text="watchFolder: userhome () + &quot;/publicFolder/&quot;,"/>
									<outline text="s3Folder: &quot;&quot;,"/>
									<outline text="urlS3Folder: &quot;&quot;"/>
									<outline text="};"/>
									</outline>
								<outline text="fs.writeFile (f, utils.jsonStringify (jstruct), function (err) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;createConfig: err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;createConfig: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
										<outline text="}"/>
										</outline>
									<outline text="callback ();"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (err) {">
								<outline text="console.log (&quot;checkConfigJson: err.message == &quot; + err.message);"/>
								<outline text="createConfig ();"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="let jstruct = JSON.parse (data);"/>
									<outline text="for (var x in jstruct.publicFolder) {">
										<outline text="myConfig.publicFolder [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="console.log (&quot;checkConfigJson: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;checkConfigJson: err.message == &quot; + err.message);"/>
									<outline text="createConfig ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="checkConfigJson (function () {">
						<outline text="publicfolder.start (myConfig.publicFolder, function () {">
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;electronPublicFolder&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.6&quot;,"/>
					<outline text="&quot;description&quot;: &quot;An Electron shell for the publicfolder package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;main.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;publicfolder&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;userhome&quot;: &quot;*&quot;,"/>
						<outline text="&quot;electronland&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="homepage.css">
				<outline text="body {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="font-size: 28px;"/>
					<outline text="line-height: 140%;"/>
					<outline text="width: 80%;"/>
					<outline text="margin-top: 90px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="border: 1px solid silver;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody p {">
					<outline text="font-size: 16px;"/>
					<outline text="line-height: 110%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divMessages {">
					<outline text="text-align: center;"/>
					<outline text="margin-top: 25%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divVersionNumber {">
					<outline text="font-size: 12px;"/>
					<outline text="float: right;"/>
					<outline text="padding-top: 18px;"/>
					<outline text="padding-right: 5px;"/>
					<outline text="color: gray;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divVersionNumber {" isComment="true">
					<outline text="font-size: 12px;"/>
					<outline text="position: fixed;"/>
					<outline text="bottom: 0;"/>
					<outline text="right: 3;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divMenubar .container {">
					<outline text="width: 650px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divLogTable {">
					<outline text="width: 500px;" isComment="true"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divLogTable td {">
					<outline text="padding: 6px;"/>
					<outline text="text-align: left;"/>
					<outline text="white-space: nowrap;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divLogTable .tdRight {">
					<outline text="text-align: right;"/>
					<outline text="padding-left: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divLogTable th {">
					<outline text="font-weight: bold;"/>
					<outline text="text-align: left;"/>
					<outline text="padding: 6px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divDropZoneActive {">
					<outline text="border: 1px solid black;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divOutlineContainer {">
					<outline text="margin-left: 50px;"/>
					<outline text="margin-right: 25px;"/>
					<outline text="margin-top: 10px;"/>
					<outline text="margin-bottom: 35px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlineTitle {">
					<outline text="font-size: 52px;"/>
					<outline text="font-weight: bold;"/>
					<outline text="line-height: 110%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlineDisplayer {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 18px;"/>
					<outline text="line-height: 140%;"/>
					<outline text="margin-left: -25px;"/>
					<outline text="margin-top: 1em;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divOutlineHead {">
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divRenderedOutline .divOutlineText {">
					<outline text="line-height: 145%;"/>
					<outline text="margin-bottom: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divUploadingNow {">
					<outline text="font-size: 16px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divUploadingNow td {">
					<outline text="padding: 5px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divStats {">
					<outline text="margin-bottom: 30px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				</outline>
			<outline text="homepage.js">
				<outline text="const shell = require (&quot;electronland&quot;).shell; "/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const electron = require (&quot;electron&quot;);"/>
				<outline text="const publicfolder = require (&quot;publicfolder&quot;);" isComment="true"/>
				<outline text=""/>
				<outline text="var appPrefs = { ">
					<outline text="watchFolder: undefined,"/>
					<outline text="s3FolderPath: undefined,"/>
					<outline text="urlS3Folder: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var flPrefsChanged = false;"/>
				<outline text="const defaultWatchedFolderName = &quot;my public folder&quot;;"/>
				<outline text="const urlFileOutline = &quot;http://localhost:1500/localfilesoutline&quot;;"/>
				<outline text="const urlLog = &quot;http://localhost:1500/log&quot;;"/>
				<outline text="const urlLocalFiles = &quot;http://localhost:1500/localfiles&quot;;"/>
				<outline text="const urlS3Files = &quot;http://localhost:1500/s3files&quot;;"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function dropZoneSetup (idzone, callback) {">
					<outline text="var dropzone = document.getElementById (idzone);"/>
					<outline text="dropzone.addEventListener (&quot;dragenter&quot;, function (e) {">
						<outline text="console.log (&quot;dropZoneSetup: dragenter event&quot;);"/>
						<outline text="e.stopPropagation ();"/>
						<outline text="e.preventDefault ();"/>
						<outline text="$(&quot;#&quot; + idzone).addClass (&quot;divDropZoneActive&quot;);"/>
						<outline text="}, false);" created="Sun, 29 Dec 2013 14:52:22 GMT" pgfnum="34801"/>
						</outline>
					<outline text="dropzone.addEventListener (&quot;dragleave&quot;, function (e) {">
						<outline text="console.log (&quot;dropZoneSetup: dragleave event&quot;);"/>
						<outline text="e.stopPropagation ();"/>
						<outline text="e.preventDefault ();"/>
						<outline text="$(&quot;#&quot; + idzone).removeClass (&quot;divDropZoneActive&quot;);"/>
						<outline text="}, false);" created="Sun, 29 Dec 2013 14:52:22 GMT" pgfnum="34801"/>
						</outline>
					<outline text="dropzone.addEventListener (&quot;dragover&quot;, function (e) {">
						<outline text="console.log (&quot;dropZoneSetup: dragover event&quot;);" isComment="true"/>
						<outline text="e.stopPropagation ();"/>
						<outline text="e.preventDefault ();"/>
						<outline text="}, false);" created="Sun, 29 Dec 2013 14:52:22 GMT" pgfnum="34801"/>
						</outline>
					<outline text="dropzone.addEventListener (&quot;drop&quot;, function (e) {">
						<outline text="e.stopPropagation ();"/>
						<outline text="e.preventDefault ();"/>
						<outline text="console.log (&quot;dropZoneSetup: drop event&quot;);"/>
						<outline text="$(&quot;#&quot; + idzone).removeClass (&quot;divDropZoneActive&quot;);"/>
						<outline text="var dt = e.dataTransfer;"/>
						<outline text="var files = dt.files;"/>
						<outline text="callback (files);"/>
						<outline text="}, false);" created="Sun, 29 Dec 2013 14:52:22 GMT" pgfnum="34801"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function dropFileSetup () {">
					<outline text="dropZoneSetup (&quot;idPageBody&quot;, function (files) {">
						<outline text="for (var i = 0; i &lt; files.length; i++) {">
							<outline text="var file = files [i];"/>
							<outline text="console.log (&quot;file.name == &quot; + file.name);"/>
							<outline text="console.log (&quot;file.size == &quot; + file.size);"/>
							<outline text="console.log (&quot;file.type == &quot; + file.type);"/>
							<outline text="console.log (&quot;file.lastModifiedDate == &quot; + file.lastModifiedDate);"/>
							<outline text=""/>
							<outline text="fs.readFile (file.path, function (err, filedata) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;dropFileSetup: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="let config = shell.getConfig (); "/>
									<outline text="let f = config.watchFolder + file.name;"/>
									<outline text="fs.writeFile (f, filedata, function (err) {">
										<outline text="if (err) {">
											<outline text="console.log (&quot;dropFileSetup: err.message == &quot; + err.message);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {" isComment="true">
											<outline text="scanFilesNow ();"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="var url = window.URL.createObjectURL (file);" isComment="true" created="Wed, 30 Apr 2014 23:09:40 GMT" pgfnum="40763"/>
							<outline text="console.log (&quot;file url == &quot; + url);" isComment="true"/>
							<outline text="" isComment="true"/>
							<outline text="var reader = new FileReader ();" isComment="true"/>
							<outline text="reader.onload = function (e) {" isComment="true">
								<outline text="let filedata = reader.result, f = appPrefs.watchFolder + file.name;"/>
								<outline text="console.log (&quot;filedata.length == &quot; + filedata.length + &quot;, f == &quot; + f);"/>
								<outline text="fs.writeFile (f, filedata, function (err) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;dropFileSetup: err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="scanFilesNow ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="reader.readAsDataURL (file);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewFilesOutline () {">
					<outline text="function readFileOutline (callback) {">
						<outline text="readHttpFile (urlFileOutline, function (data) {">
							<outline text="if (data !== undefined) {">
								<outline text="try {">
									<outline text="let theOutline = JSON.parse (data);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (theOutline);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="readFileOutline (function (theOutline) {">
						<outline text="console.log (jsonStringify (theOutline));" isComment="true"/>
						<outline text="var htmltext = renderOutlineBrowser (theOutline, false, undefined, undefined, true);"/>
						<outline text="$(&quot;#idOutlineDisplayer&quot;).html (htmltext);"/>
						<outline text="$(&quot;#idOutlineTitle&quot;).html (jstruct.text);" isComment="true"/>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function chooseFolderDialog (defaultFolder, callback) {" isComment="true">
					<outline text="var options = {">
						<outline text="defaultPath: defaultFolder,"/>
						<outline text="properties: [&quot;createDirectory&quot;, &quot;openDirectory&quot;] "/>
						<outline text="};"/>
						</outline>
					<outline text="console.log (&quot;chooseFolderDialog: options.defaultPath == &quot; + options.defaultPath);"/>
					<outline text="require (&quot;electron&quot;).remote.dialog.showOpenDialog (options, function (theFiles) {">
						<outline text="console.log (&quot;chooseFolderDialog: theFiles == &quot; + utils.jsonStringify (theFiles));"/>
						<outline text="if ((theFiles !== undefined) &amp;&amp; (theFiles.length &gt; 0)) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (theFiles [0] + &quot;/&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function chooseFolder () {">
					<outline text="shell.chooseFolderDialog (appPrefs.watchFolder, function (theFolder) {">
						<outline text="appPrefs.watchFolder = theFolder;"/>
						<outline text="shell.openItem (theFolder);"/>
						<outline text="prefsChanged ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function openWatchFolder () {">
					<outline text="var config = shell.getConfig ();"/>
					<outline text="console.log (&quot;openWatchFolder: config == &quot; + jsonStringify (config));"/>
					<outline text="shell.openItem (config.watchFolder);"/>
					<outline text="}"/>
					</outline>
				<outline text="function prefsChanged () {">
					<outline text="flPrefsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function initAppPrefs () {" isComment="true">
					<outline text="var config = shell.getConfig ();"/>
					<outline text="if (appPrefs.watchFolder === undefined) {">
						<outline text="appPrefs.watchFolder = config.userDataFolder + defaultWatchedFolderName + &quot;/&quot;;"/>
						<outline text="utils.sureFilePath (appPrefs.watchFolder + &quot;xxx&quot;);"/>
						<outline text="prefsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function sendFoldersToMainThread () {">
					<outline text="let folders = {">
						<outline text="watchFolder: appPrefs.watchFolder,"/>
						<outline text="s3FolderPath: appPrefs.s3FolderPath,"/>
						<outline text="urlS3Folder: appPrefs.urlS3Folder"/>
						<outline text="};"/>
						</outline>
					<outline text="electron.ipcRenderer.send (&quot;asynch-message&quot;, &quot;setPublicfolderConfig&quot;, jsonStringify (folders));  "/>
					<outline text="}"/>
					</outline>
				<outline text="function openSettingsDialog () {">
					<outline text="shell.openSettingsDialog (function (appPrefsFromStorage) {">
						<outline text="for (var x in appPrefsFromStorage) {">
							<outline text="appPrefs [x] = appPrefsFromStorage [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="sendFoldersToMainThread ();"/>
						<outline text="});"/>
						</outline>
					<outline text="shell.openSettingsDialog ();" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function emptyLog () {">
					<outline text="confirmDialog (&quot;Empty the action log?&quot;, function () {" created="Wed, 27 Feb 2013 16:18:09 GMT" pgfnum="19236">
						<outline text="electron.ipcRenderer.send (&quot;asynch-message&quot;, &quot;emptyLog&quot;);  "/>
						<outline text="});" created="Sun, 14 Apr 2013 02:15:30 GMT" pgfnum="22673"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function scanFilesNow () {">
					<outline text="electron.ipcRenderer.send (&quot;asynch-message&quot;, &quot;scanFilesNow&quot;);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function aboutSystemMenu () {">
					<outline text="alertDialog (&quot;The commands in this menu are placeholders.&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function viewStats (stats) {">
					<outline text="if (getBoolean (stats.flGoodLaunch)) {">
						<outline text="function formatDateTime (d) {">
							<outline text="d = new Date (d);"/>
							<outline text="return (d.toLocaleDateString () + &quot; at &quot; + d.toLocaleTimeString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idWhenLaunch&quot;).text (formatDateTime (stats.whenLaunch));"/>
						<outline text="$(&quot;#idCtUploads&quot;).text (stats.ctUploads);"/>
						<outline text="$(&quot;#idCtBytesUploaded&quot;).text (utils.gigabyteString (stats.ctBytesUploaded));"/>
						<outline text="$(&quot;#idCtDeletes&quot;).text (stats.ctDeletes);"/>
						<outline text="$(&quot;#idFolderSizeLocal&quot;).text (utils.gigabyteString (stats.ctBytesInLocalFolder))"/>
						<outline text="$(&quot;#idFolderSizeS3&quot;).text (utils.gigabyteString (stats.ctBytesInS3Folder));"/>
						<outline text="$(&quot;#idCtLocalFiles&quot;).text (stats.ctFilesInLocalFolder);"/>
						<outline text="$(&quot;#idCtS3Files&quot;).text (stats.ctFilesInS3Folder);"/>
						<outline text="$(&quot;#idCurrentThreads&quot;).text (stats.ctCurrentThreads);"/>
						<outline text="$(&quot;#idFilesInQueue&quot;).text (stats.ctFilesInQueue);"/>
						<outline text="$(&quot;#idStats&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function viewLog () {">
					<outline text="var htmltext = &quot;&quot;, indentlevel = 0, whenstart = new Date ();"/>
					<outline text="function add (s) {">
						<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="function getLogFile () {" isComment="true">
						<outline text="return (shell.getConfig ().userDataFolder + &quot;log.json&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getLogFile () {">
						<outline text="var config = shell.getConfig ();"/>
						<outline text="return (config.userDataFolder + config.publicFolder.logFname);"/>
						<outline text="}"/>
						</outline>
					<outline text="function readLog (callback) {">
						<outline text="readHttpFile (urlLog, function (jsontext) {">
							<outline text="if (jsontext === undefined) {">
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="callback (JSON.parse (jsontext));"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readLog: err.message == &quot; + err.message);"/>
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="fs.readFile (getLogFile (), function (err, data) {" isComment="true">
							<outline text="if (err) {">
								<outline text="console.log (&quot;readLog: err.messaage == &quot; + err.messaage);" isComment="true"/>
								<outline text="callback (undefined);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data);"/>
									<outline text="console.log (&quot;readPrefs: jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
									<outline text="callback (jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readLog: err.messaage == &quot; + err.messaage);"/>
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="readLog (function (theLog) {">
						<outline text="if (theLog !== undefined) {">
							<outline text="viewStats (theLog.stats);"/>
							<outline text="if (theLog.actions.length &gt; 0) {">
								<outline text="function sizestring (size) {">
									<outline text="if (size === undefined) {">
										<outline text="return (&quot;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="return (utils.gigabyteString (size));"/>
									<outline text="}"/>
									</outline>
								<outline text="add (&quot;&lt;table class=\&quot;divLogTable\&quot;&gt;&quot;); indentlevel++;"/>
								<outline text="//header">
									<outline text="add (&quot;&lt;tr&gt;&quot;); indentlevel++;"/>
									<outline text="add (&quot;&lt;th class=\&quot;tdRight\&quot;&gt;When&lt;/th&gt;&quot;);"/>
									<outline text="add (&quot;&lt;th&gt;File&lt;/th&gt;&quot;);"/>
									<outline text="add (&quot;&lt;th&gt;Action&lt;/td&gt;&quot;);"/>
									<outline text="add (&quot;&lt;th class=\&quot;tdRight\&quot;&gt;Size&lt;/th&gt;&quot;);"/>
									<outline text="add (&quot;&lt;th class=\&quot;tdRight\&quot;&gt;Secs&lt;/th&gt;&quot;);"/>
									<outline text="add (&quot;&lt;/tr&gt;&quot;); indentlevel--;"/>
									</outline>
								<outline text="for (var i = 0; i &lt; theLog.actions.length; i++) {">
									<outline text="let item = theLog.actions [i], fname = maxLengthString (stringLastField (item.path, &quot;/&quot;), 40);"/>
									<outline text="add (&quot;&lt;tr&gt;&quot;); indentlevel++;"/>
									<outline text="add (&quot;&lt;td class=\&quot;tdRight\&quot;&gt;&quot; + utils.viewDate (item.when) + &quot;&lt;/td&gt;&quot;);"/>
									<outline text="//link">
										<outline text="let link = fname;"/>
										<outline text="if (item.url !== undefined) {">
											<outline text="link = &quot;&lt;a href=\&quot;&quot; + item.url + &quot;\&quot;&gt;&quot; + fname + &quot;&lt;/a&gt;&quot;;"/>
											<outline text="}"/>
											</outline>
										<outline text="add (&quot;&lt;td&gt;&quot; + link + &quot;&lt;/td&gt;&quot;);"/>
										</outline>
									<outline text="add (&quot;&lt;td&gt;&quot; + item.action + &quot;&lt;/td&gt;&quot;);"/>
									<outline text="add (&quot;&lt;td class=\&quot;tdRight\&quot;&gt;&quot; + sizestring (item.size) + &quot;&lt;/td&gt;&quot;);"/>
									<outline text="add (&quot;&lt;td class=\&quot;tdRight\&quot;&gt;&quot; + item.secs + &quot;&lt;/td&gt;&quot;);"/>
									<outline text="add (&quot;&lt;td&gt;&quot; + utils.getFacebookTimeString (item.when) + &quot;&lt;/td&gt;&quot;);" isComment="true"/>
									<outline text="add (&quot;&lt;/tr&gt;&quot;); indentlevel--;"/>
									<outline text="}"/>
									</outline>
								<outline text="add (&quot;&lt;/table&gt;&quot;); indentlevel--;"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#idLog&quot;).html (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="//uploadingNow display">
					<outline text="let uploadingNow = {">
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="function uploadStart (fileInfo) {">
						<outline text="console.log (&quot;uploadStart: fileInfo == &quot; + jsonStringify (fileInfo));"/>
						<outline text="uploadingNow [fileInfo.relpath] = new Date ();"/>
						<outline text="viewStats (fileInfo.stats);"/>
						<outline text="viewUploadingNow ();" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function uploadDone (fileInfo) {">
						<outline text="console.log (&quot;uploadDone: fileInfo == &quot; + jsonStringify (fileInfo));"/>
						<outline text="delete uploadingNow [fileInfo.relpath];"/>
						<outline text="viewStats (fileInfo.stats);"/>
						<outline text="viewUploadingNow ();" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function viewUploadingNow () {">
						<outline text=""/>
						<outline text="return; //wired off for now -- 9/16/17 by DW"/>
						<outline text=""/>
						<outline text=""/>
						<outline text="var htmltext = &quot;&quot;, indentlevel = 0, ct = 0;"/>
						<outline text="function add (s) {">
							<outline text="htmltext += filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;table&gt;&quot;); indentlevel++;"/>
						<outline text="for (var x in uploadingNow) {">
							<outline text="let fname = maxLengthString (stringLastField (x, &quot;/&quot;), 50);"/>
							<outline text="let secs = secondsSince (uploadingNow [x]).toFixed (2);"/>
							<outline text="add (&quot;&lt;tr&gt;&lt;td&gt;&quot; + fname + &quot;&lt;/td&gt;&lt;td&gt;&quot; + secs + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;);"/>
							<outline text="ct++;"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;/table&gt;&quot;); indentlevel--;"/>
						<outline text=""/>
						<outline text="if (ct &gt; 0) {">
							<outline text="htmltext = &quot;&lt;h4&gt;Uploading now..&lt;/h4&gt;&quot; + htmltext;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (htmltext != $(&quot;#idUploadingNow&quot;).html ()) {">
							<outline text="$(&quot;#idUploadingNow&quot;).html (htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="function viewMainThreadStats (jsontext) {">
					<outline text="let stats = JSON.parse (jsontext);"/>
					<outline text="console.log (&quot;viewMainThreadStats: stats.queueLength == &quot; + stats.queueLength);" isComment="true"/>
					<outline text="$(&quot;#idQueueLength&quot;).html (stats.queueLength);"/>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="viewLog ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="initTwitterMenuItems ();"/>
					<outline text="viewUploadingNow (); //9/15/17 by DW"/>
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="shell.setPrefs (appPrefs);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="var options = {">
						<outline text="ipcMessageCallback: function (name, value) {">
							<outline text="console.log (&quot;ipcMessageCallback: name == &quot; + name);"/>
							<outline text="switch (name) {">
								<outline text="case &quot;viewLog&quot;:">
									<outline text="viewLog ();"/>
									<outline text="viewMainThreadStats (value);"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;addToLog&quot;: //an item was added to the log, outline needs update">
									<outline text="let logItem = JSON.parse (value);"/>
									<outline text="console.log (&quot;addToLog: logItem == &quot; + jsonStringify (logItem));"/>
									<outline text="viewLog ();"/>
									<outline text="viewFilesOutline ();"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;uploadStart&quot;: //9/15/17 by DW">
									<outline text="uploadStart (JSON.parse (value));"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;uploadDone&quot;:  //9/15/17 by DW">
									<outline text="uploadDone (JSON.parse (value));"/>
									<outline text="break;"/>
									</outline>
								<outline text="case &quot;viewStats&quot;:  //9/16/17 by DW">
									<outline text="viewStats (JSON.parse (value));"/>
									<outline text="break;"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="shell.init (options, function (appPrefsFromStorage) {">
						<outline text="for (var x in appPrefsFromStorage) {">
							<outline text="appPrefs [x] = appPrefsFromStorage [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="initAppPrefs ();" isComment="true"/>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="twGetUserInfo (twGetScreenName (), function (userinfo) {">
								<outline text="console.log (&quot;startup: userinfo == &quot; + jsonStringify (userinfo));"/>
								<outline text="$(&quot;#idUserName&quot;).text (userinfo.name);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="viewFilesOutline (); //9/7/17 by DW"/>
						<outline text="viewLog ();"/>
						<outline text="dropFileSetup ();"/>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text="utils.runAtTopOfMinute (function () {">
							<outline text="self.setInterval (everyMinute, 60000); "/>
							<outline text="everyMinute ();"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="settings.opml">
				<outline text="On S3" created="Sat, 15 Jun 2013 22:00:35 GMT" pgfnum="26413">
					<outline text="&lt;%prefs.stringPref (&quot;Path&quot;, &quot;s3FolderPath&quot;, &quot;The path to the storage location on S3.&quot;)%&gt;"/>
					<outline text="&lt;%prefs.stringPref (&quot;URL&quot;, &quot;urlS3Folder&quot;, &quot;The URL to use for the S3 location.&quot;)%&gt;"/>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Public Folder&lt;/title&gt; "/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; "/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="" created="Thu, 21 Oct 2021 15:37:17 GMT"/>
						<outline text="&lt;link href=&quot;http://fonts.googleapis.com/css?family=Ubuntu:400,500i,700&quot; rel=&quot;stylesheet&quot;&gt;" isComment="true"/>
						<outline text="&lt;link href=&quot;http://fonts.googleapis.com/css?family=Rancho&quot; rel=&quot;stylesheet&quot;&gt;" isComment="true"/>
						<outline text="" isComment="true" created="Thu, 21 Oct 2021 15:22:30 GMT"/>
						<outline text="&lt;script src=&quot;includes/fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;includes/fargo.io/code/shared/electronland2/lib/electronshell.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;includes/fargo.io/code/browsers/outlinebrowser.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;includes/fargo.io/code/browsers/outlinebrowser.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;includes/scripting.com/code/includes/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;includes/scripting.com/code/includes/bootstrap.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;includes/scripting.com/code/includes/bootstrap.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;includes/scripting.com/code/fontawesome/css/all.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;includes/fargo.io/code/ubuntuFont.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;includes/fargo.io/code/ranchoFont.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;script src=&quot;includes/scripting.com/code/includes/basic/code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;includes/scripting.com/code/includes/basic/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="" created="Thu, 21 Oct 2021 15:27:55 GMT"/>
						<outline text="&lt;script src=&quot;homepage.js?x=0&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;homepage.css?x=0&quot;/&gt;"/>
						<outline text="" created="Thu, 21 Oct 2021 15:23:38 GMT"/>
						<outline text="//old includes accessed over web -- 10/21/21 by DW" isComment="true" created="Thu, 21 Oct 2021 15:23:39 GMT">
							<outline text="&lt;%basicIncludes2%&gt; "/>
							<outline text="&lt;link href=&quot;https://fonts.googleapis.com/css?family=Ubuntu:400,500,700&quot; rel=&quot;stylesheet&quot;&gt;"/>
							<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
							<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;http://fargo.io/code/shared/electronland2/lib/electronshell.css&quot;/&gt;"/>
							<outline text="&lt;script src=&quot;http://fargo.io/code/browsers/outlinebrowser.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
							<outline text="&lt;link href=&quot;http://fargo.io/code/browsers/outlinebrowser.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divSettingsDialog&quot;&gt;">
							<outline text="&lt;div id=&quot;idSettingsDialog&quot; class=&quot;modal hide fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;windowTitleLabel&quot; aria-hidden=&quot;true&quot;&gt;">
								<outline text="&lt;div class=&quot;modal-header&quot;&gt;" isComment="true">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&amp;times;&lt;/a&gt;"/>
									<outline text="&lt;h3&gt;Preferences&lt;/h3&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-body&quot;&gt;">
									<outline text="&lt;div class=&quot;divDialogElements&quot;&gt;">
										<outline text="&lt;%prefs.includeOutline (&quot;http://fargo.io/code/testing/publicfolder2/settings.opml&quot;)%&gt; " created="Mon, 31 Dec 2012 16:55:33 GMT" pgfnum="16518"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-footer&quot;&gt;">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn&quot; onclick=&quot;shell.closeSettingsDialog ();&quot;&gt;Cancel&lt;/a&gt;"/>
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; onclick=&quot;shell.okSettingsDialog ();&quot;&gt;OK&lt;/a&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;&lt;/div&gt;"/>
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; href=&quot;/&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot; id=&quot;idMainMenuList&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idMainMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;chooseFolder ();&quot;&gt;Choose watch folder...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openWatchFolder ();&quot;&gt;Open watch folder...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.openUserDataFolder ();&quot;&gt;Open data folder...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;emptyLog ();&quot;&gt;Empty log...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idDocsMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Docs&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a href=&quot;http://this.how/publicFolder/&quot;&gt;Howto...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;https://github.com/scripting/publicfolder&quot;&gt;Source...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idFileMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;File&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;newFileCommand ();&quot;&gt;New file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openFileCommand ();&quot;&gt;Open file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addTabCommand ();&quot;&gt;Add tab...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;closeTabCommand ();&quot;&gt;Close&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewOutlineOpml ();&quot;&gt;View OPML...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;titleDescriptionDialog ();&quot;&gt;Set title &amp; description...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;editOpmlHeaders ();&quot;&gt;Edit OPML headers...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;runCursorScript ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-/&lt;/span&gt;Run Selection&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;makeOutlinePublic ();&quot;&gt;Make outline public...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;subscribeToInstantOutlineCommand ();&quot;&gt;Subscribe to outline...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Special files...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openMenubarOpml ()&quot;&gt;Menubar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openIconbarOpml ()&quot;&gt;Iconbar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openBookmarksOpml ()&quot;&gt;Bookmarks...&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.openUserDataFolder ();&quot;&gt;Open data folder&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idOutlinerMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Outliner&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpand ();&quot;&gt;Expand&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandAllLevels ();&quot;&gt;Expand All Subs&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandEverything ();&quot;&gt;Expand Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapse ();&quot;&gt;Collapse&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapseEverything ();&quot;&gt;Collapse Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDeleteLine ();&quot;&gt;Delete Line&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Build...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildListicle ()&quot;&gt;Listicle&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildStatusCenter ()&quot;&gt;Status Center&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-F&lt;/span&gt;Find...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindAgainCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-G&lt;/span&gt;Find again&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idReorgMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Reorg&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (up, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-U&lt;/span&gt;Move Up&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (down, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-D&lt;/span&gt;Move Down&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (left, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-L&lt;/span&gt;Move Left&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (right, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-R&lt;/span&gt;Move Right&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="" created="Mon, 12 May 2014 23:20:46 GMT" pgfnum="41579"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleArrowPad ();&quot;&gt;&lt;span id=&quot;idArrowPadCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opToggleComment ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-\&lt;/span&gt;Comment&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="" created="Sat, 07 Sep 2013 16:56:40 GMT" pgfnum="29953"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opPromote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-[&lt;/span&gt;Promote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDemote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-]&lt;/span&gt;Demote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown desktopOnly&quot; id=&quot;idBookmarksMenu&quot; style=&quot;display: none;&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Bookmarks&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot; id=&quot;idBookmarksList&quot;&gt;">
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot; style=&quot;display: none&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutSystemMenu ();&quot;&gt;About this menu...&lt;span id=&quot;idMenuAboutProductName&quot; style=&quot;display: none;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;disabled&quot;&gt;&lt;a onclickx=&quot;openSettingsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;disabled&quot;&gt;&lt;a onclickx=&quot;shell.toggleTwitterConnect ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot;&gt;" isComment="true">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutSystemMenu ();&quot;&gt;About &lt;span id=&quot;idMenuAboutProductName&quot;&gt;&lt;/span&gt;...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openSettingsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.toggleTwitterConnect ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot; id=&quot;idPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divStats&quot; id=&quot;idStats&quot; style=&quot;display: none;&quot;&gt;">
								<outline text="&lt;p&gt;Server up since: &lt;span  id=&quot;idWhenLaunch&quot;&gt;&lt;/span&gt;.&lt;/p&gt;"/>
								<outline text="&lt;p&gt;&lt;span id=&quot;idCurrentThreads&quot;&gt;&lt;/span&gt; files being processed, &lt;span id=&quot;idFilesInQueue&quot;&gt;&lt;/span&gt; files in queue.&lt;/p&gt;"/>
								<outline text="&lt;p&gt;Folder size: &lt;span id=&quot;idCtLocalFiles&quot;&gt;&lt;/span&gt; files, &lt;span  id=&quot;idFolderSizeLocal&quot;&gt;&lt;/span&gt; (local). &lt;span id=&quot;idCtS3Files&quot;&gt;&lt;/span&gt; files, &lt;span id=&quot;idFolderSizeS3&quot;&gt;&lt;/span&gt; (on S3).&lt;/p&gt;"/>
								<outline text="&lt;p&gt;Uploads: &lt;span  id=&quot;idCtUploads&quot;&gt;&lt;/span&gt; files, &lt;span id=&quot;idCtBytesUploaded&quot;&gt;&lt;/span&gt;. Deletes: &lt;span id=&quot;idCtDeletes&quot;&gt;&lt;/span&gt;.&lt;/p&gt;"/>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divLog&quot; id=&quot;idLog&quot;&gt;">
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divQueueLength&quot; id=&quot;idQueueLength&quot; style=&quot;display: none;&quot;&gt;">
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divUploadingNow&quot; id=&quot;idUploadingNow&quot; style=&quot;display: none;&quot;&gt;">
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div class=&quot;divOutlineDisplayer&quot; id=&quot;idOutlineDisplayer&quot; style=&quot;display: none;&quot;&gt;">
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="scripts" isComment="true">
				<outline text="sudo electron-packager . &quot;Public Folder&quot; --platform=darwin --arch=all --overwrite --icon=bowlingBall.icns --electron-version=7.1.10" isComment="true"/>
				<outline text="" created="Wed, 20 Oct 2021 15:46:46 GMT"/>
				<outline text="" created="Wed, 20 Oct 2021 15:46:47 GMT"/>
				<outline text="" created="Wed, 20 Oct 2021 15:46:47 GMT"/>
				<outline text="" created="Wed, 20 Oct 2021 15:46:47 GMT"/>
				<outline text="sudo electron-packager . &quot;Public Folder&quot; --platform=darwin --arch=all --overwrite --electron-version=1.7.6 --icon=bowlingBall.icns"/>
				<outline text="sudo electron-packager . &quot;Public Folder&quot; --platform=darwin --arch=all --electron-version=0.37.5 --overwrite --icon=folder.icns"/>
				</outline>
			</outline>
		<outline text="build script" created="Sun, 30 Jan 2022 14:31:03 GMT">
			<outline text="nodeEditorSuite.utilities.buildElectronPublicFolder ()"/>
			</outline>
		</body>
	</opml>
